@model InstructorStudentGraphViewModel

<!-- References to Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div style="text-align: center; margin: 20px 0;">
    <label for="studentSelector" style="margin-right: 10px;">Select a Student:</label>
    <select id="studentSelector" onchange="loadStudentGraph()" class="form-control" style="display: inline-block; width: auto; min-width: 200px;">
        <option value="">Select a Student</option>
        @foreach (var student in Model.Students)
        {
            <option value="@student.Value">@student.Text</option>
        }
    </select>
</div>

<!-- Chart container with flex layout for responsiveness -->
<div id="chartContainer" style="display: none; flex-direction: column; align-items: center; background-color: #fff; padding: 20px; border-radius: 5px;">
    <!-- Canvas for rendering the student's graph -->
    <div style="width: 100%; max-width: 800px;">
        <canvas id="dailyChart"></canvas>
    </div>
    <div style="width: 100%; max-width: 800px;">
        <canvas id="monthlyChart"></canvas>
    </div>
    <div style="width: 100%; max-width: 800px;">
        <canvas id="yearlyChart"></canvas>
    </div>
</div>


@section Scripts
    {
    <script>
        function loadStudentGraph() {
            var studentId = document.getElementById('studentSelector').value;
            if (!studentId) {
                clearChart('dailyChart');
                clearChart('monthlyChart');
                clearChart('yearlyChart');
                chartContainer.style.display = 'none'; // Hide the chart container
                return;
            }
            chartContainer.style.display = 'flex';
            fetch('/Sadhana/GetStudentGraphData?studentId=' + studentId)
                .then(response => response.json())
                .then(data => {
                    console.log("Received data:", data);

                    if (data.daily) {
                        renderChart('dailyChart', data.daily.map(d => d.date), data.daily.map(d => d.totalScore), 'Daily Scores');
                    }

                    if (data.monthly) {
                        renderChart('monthlyChart', data.monthly.map(m => m.month), data.monthly.map(m => m.totalScore), 'Monthly Scores');
                    }

                    if (data.yearly) {
                        renderChart('yearlyChart', data.yearly.map(y => y.year), data.yearly.map(y => y.totalScore), 'Yearly Scores');
                    }
                })
                .catch(error => {
                    console.error("Error loading student graph data: ", error);
                });
        }

        function renderChart(elementId, labels, data, title) {
            console.log("elementId:", elementId);
            console.log("labels:", labels);
            console.log("data:", data);
            console.log("title:", title);

            var ctx = document.getElementById(elementId).getContext('2d');
            if (window[elementId + 'GraphInstance']) {
                window[elementId + 'GraphInstance'].destroy();
            }

            window[elementId + 'GraphInstance'] = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: title,
                        data: data,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function clearChart(elementId) {
            if (window[elementId + 'GraphInstance']) {
                window[elementId + 'GraphInstance'].destroy();
                window[elementId + 'GraphInstance'] = null;
            }
        }
    </script>
}
